<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~   WSO2 Inc. licenses this file to you under the Apache License,
  ~   Version 2.0 (the "License"); you may not use this file except
  ~   in compliance with the License.
  ~   You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing,
  ~  software distributed under the License is distributed on an
  ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~  KIND, either express or implied.  See the License for the
  ~  specific language governing permissions and limitations
  ~  under the License.
-->
<template name="getAccessTokenFromRefreshToken" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="refreshToken" description="Refresh token"/>
    <parameter name="clientId"
               description="Client_id of your App, given by Asana when you registered your application"/>
    <parameter name="clientSecret"
               description="Client Secret of your App, given by Asana when you registered your application"/>
    <parameter name="grantType" description="Token grant type. Value must be set to refresh_token"/>
    <parameter name="redirectUri"
               description="We must set the uri redirect to on success or error.
               This must match the Redirect URL specified in the application settings."/>
    <sequence>
        <property name="uri.var.refreshToken" expression="$func:refreshToken"/>
        <property name="uri.var.clientId" expression="$func:clientId"/>
        <property name="uri.var.clientSecret" expression="$func:clientSecret"/>
        <property name="uri.var.grantType" expression="$func:grantType"/>
        <property name="uri.var.redirectUri" expression="$func:redirectUri"/>
        <call>
            <endpoint>
                <http method="POST"
                      uri-template="https://app.asana.com/-/oauth_token?client_id={+uri.var.clientId}&amp;client_secret={+uri.var.clientSecret}&amp;redirect_uri={+uri.var.redirectUri}&amp;refresh_token={+uri.var.refreshToken}&amp;grant_type={+uri.var.grantType}"/>
            </endpoint>
        </call>
        <!-- Setting the new access token to the property. -->
        <property name="uri.var.accessToken" expression="json-eval($.access_token)"/>
        <property name="uri.var.apiUrl" expression="json-eval($.instance_url)"/>
        <property name="systemTime" expression="$ctx:SYSTEM_TIME"
                  scope="default"/>
        <script language="js">
            <![CDATA[
                importPackage(Packages.org.apache.synapse.config);
                var newAccessToken = mc.getProperty('uri.var.accessToken');
                var newSystemTime = mc.getProperty('systemTime');
                var newAccessRegistryPath = mc.getProperty('uri.var.accessTokenRegistryPath');
                var newTimeRegistryPath = mc.getProperty('uri.var.timeRegistryPath');
                if(newAccessToken != null && newAccessToken != ''){
                    var existingAccessToken = mc.getConfiguration().getRegistry().getResource(newAccessRegistryPath);
                    var existingTime = mc.getConfiguration().getRegistry().getResource(newTimeRegistryPath);
                    if(existingAccessToken == null){
                        // Create the registry entry if no such entry exists.
                        mc.getConfiguration().getRegistry().newResource(newAccessRegistryPath, false);
                        mc.getConfiguration().getRegistry().updateResource(newAccessRegistryPath, newAccessToken);
                        mc.getConfiguration().getRegistry().newResource(newTimeRegistryPath, false);
                        mc.getConfiguration().getRegistry().updateResource(newTimeRegistryPath, newSystemTime);
                    } else {
                    // Update the registry entry if it already exists.
                    mc.getConfiguration().getRegistry().updateResource(newAccessRegistryPath, newAccessToken);
                    mc.getConfiguration().getRegistry().updateResource(newTimeRegistryPath, newSystemTime);
                    }
                }
            ]]>
        </script>
        <!-- Remove custom Headers from the API Response -->
        <header name="Cache-Control" action="remove" scope="transport"/>
        <header name="Pragma" action="remove" scope="transport"/>
    </sequence>
</template>
